// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_FLAGS_HPP_
#define OPENXR_FLAGS_HPP_
/**
 * @file
 * @brief C++ projections of OpenXR flag (bitmask) types.
 *
 * @see openxr_enums.hpp
 * @ingroup flags
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif

#if !defined(OPENXR_HPP_ASSERT)
#include <cassert>
#define OPENXR_HPP_ASSERT assert
#endif

// 32-bit OpenXR is not typesafe for handles, so don't allow copy constructors
// on this platform by default. To enable this feature on 32-bit platforms
// please define OPENXR_HPP_TYPESAFE_CONVERSION
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__)) || \
    defined(_M_X64) || defined(__ia64) || defined(_M_IA64) || defined(__aarch64__) ||       \
    defined(__powerpc64__)
#if !defined(OPENXR_HPP_TYPESAFE_CONVERSION)
#define OPENXR_HPP_TYPESAFE_CONVERSION
#endif
#endif

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE

#if !defined(OPENXR_HPP_STRINGIFY)
#define OPENXR_HPP_STRINGIFY2(text) #text
#define OPENXR_HPP_STRINGIFY(text) OPENXR_HPP_STRINGIFY2(text)
#define OPENXR_HPP_NAMESPACE_STRING OPENXR_HPP_STRINGIFY(OPENXR_HPP_NAMESPACE)
#endif  // !OPENXR_HPP_STRINGIFY

namespace OPENXR_HPP_NAMESPACE {

template <typename FlagBitsType>
struct FlagTraits {
  enum { allFlags = 0 };
};

/**
 * @brief Template type for bit flag projection
 *
 * @tparam BitType The projected enum that contains the bits
 * @tparam MaskType The type of the combined flags, typically the default, XrFlags64.
 */
template <typename BitType, typename MaskType = XrFlags64>
class Flags {
public:
  //! Default constructor
  OPENXR_HPP_CONSTEXPR Flags() : m_mask(0) {}

  //! Implicit constructor from a single bit
  Flags(BitType bit) : m_mask(static_cast<MaskType>(bit)) {}

  //! Copy constructor
  Flags(Flags const &rhs) = default;

  //! Copy assignment
  Flags &operator=(Flags const &rhs) = default;

  //! Explicit constructor from flags value
  explicit Flags(MaskType flags) : m_mask(flags) {}

  //! OR update operator - commonly used for combining flags
  Flags &operator|=(Flags const &rhs) {
    m_mask |= rhs.m_mask;
    return *this;
  }

  //! AND update operator
  Flags &operator&=(Flags const &rhs) {
    m_mask &= rhs.m_mask;
    return *this;
  }

  //! XOR update operator
  Flags &operator^=(Flags const &rhs) {
    m_mask ^= rhs.m_mask;
    return *this;
  }

  //! OR operator, often used for combining flags.
  Flags operator|(Flags const &rhs) const {
    Flags result(*this);
    result |= rhs;
    return result;
  }

  //! AND operator, often used for testing the value of certain bits.
  Flags operator&(Flags const &rhs) const {
    Flags result(*this);
    result &= rhs;
    return result;
  }

  //! XOR operator
  Flags operator^(Flags const &rhs) const {
    Flags result(*this);
    result ^= rhs;
    return result;
  }

  //! Unary negation: true if all bits were false.
  bool operator!() const { return !m_mask; }

  //! Bitwise negation (complement) operator
  Flags operator~() const {
    Flags result(*this);
    result.m_mask ^= FlagTraits<BitType>::allFlags;
    return result;
  }

  //! Accessor for contained value
  MaskType get() const noexcept { return m_mask; }

  //! Equality comparison
  bool operator==(Flags const &rhs) const { return m_mask == rhs.m_mask; }

  //! Inequality comparison
  bool operator!=(Flags const &rhs) const { return m_mask != rhs.m_mask; }

  //! Equality comparison, mainly intended for compare to 0
  bool operator==(int rhs) const { return m_mask == static_cast<MaskType>(rhs); }

  //! Inequality comparison, mainly intended for compare to 0
  bool operator!=(int rhs) const { return m_mask != static_cast<MaskType>(rhs); }

  //! Explicit bool conversion: true if any bits are true.
  explicit operator bool() const { return !!m_mask; }

  //! Explicit conversion operator to the underlying mask type.
  explicit operator MaskType() const { return m_mask; }

private:
  MaskType m_mask;
};

/**
 * @brief Bitwise OR between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator|(BitType bit, Flags<BitType, MaskType> const &flags) {
  return flags | bit;
}

/**
 * @brief Bitwise AND between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator&(BitType bit, Flags<BitType, MaskType> const &flags) {
  return flags & bit;
}

/**
 * @brief Bitwise XOR between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator^(BitType bit, Flags<BitType, MaskType> const &flags) {
  return flags ^ bit;
}

}  // namespace OPENXR_HPP_NAMESPACE
namespace OPENXR_HPP_NAMESPACE {

/*!
 * @defgroup flags Flags
 * @brief C++ flags classes corresponding to OpenXR C flags and flagbits, plus associated utility
 * functions.
 * @ingroup wrappers
 * @{
 */

/*!
 * @brief Flag bits for XrInstanceCreateFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInstanceCreateFlagBits>
 * @xrentity{XrInstanceCreateFlagBits}
 * @see InstanceCreateFlags
 */
enum class InstanceCreateFlagBits : XrFlags64 { None = 0, AllBits = 0 };

/*!
 * @brief Flags class projection of XrInstanceCreateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInstanceCreateFlags>
 * @xrentity{XrInstanceCreateFlagBits}
 * @see InstanceCreateFlagBits, xr::Flags
 */
using InstanceCreateFlags = Flags<InstanceCreateFlagBits, XrInstanceCreateFlags>;

/*!
 * @brief Bitwise OR operator between two InstanceCreateFlagBits flag bits.
 * @see InstanceCreateFlagBits, InstanceCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE InstanceCreateFlags operator|(InstanceCreateFlagBits bit0,
                                                InstanceCreateFlagBits bit1) {
  return InstanceCreateFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a InstanceCreateFlagBits flag bit.
 * @see InstanceCreateFlagBits, InstanceCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE InstanceCreateFlags operator~(InstanceCreateFlagBits bits) {
  return ~(InstanceCreateFlags(bits));
}

/*!
 * @brief Flag bits for XrSessionCreateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSessionCreateFlagBits>
 * @xrentity{XrSessionCreateFlagBits}
 * @see SessionCreateFlags
 */
enum class SessionCreateFlagBits : XrFlags64 { None = 0, AllBits = 0 };

/*!
 * @brief Flags class projection of XrSessionCreateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSessionCreateFlags>
 * @xrentity{XrSessionCreateFlagBits}
 * @see SessionCreateFlagBits, xr::Flags
 */
using SessionCreateFlags = Flags<SessionCreateFlagBits, XrSessionCreateFlags>;

/*!
 * @brief Bitwise OR operator between two SessionCreateFlagBits flag bits.
 * @see SessionCreateFlagBits, SessionCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SessionCreateFlags operator|(SessionCreateFlagBits bit0,
                                               SessionCreateFlagBits bit1) {
  return SessionCreateFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SessionCreateFlagBits flag bit.
 * @see SessionCreateFlagBits, SessionCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SessionCreateFlags operator~(SessionCreateFlagBits bits) {
  return ~(SessionCreateFlags(bits));
}

/*!
 * @brief Flag bits for XrSpaceVelocityFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceVelocityFlagBits>
 * @xrentity{XrSpaceVelocityFlagBits}
 * @see SpaceVelocityFlags
 */
enum class SpaceVelocityFlagBits : XrFlags64 {
  None = 0,
  LinearValid = XR_SPACE_VELOCITY_LINEAR_VALID_BIT,
  AngularValid = XR_SPACE_VELOCITY_ANGULAR_VALID_BIT,
  AllBits = XR_SPACE_VELOCITY_LINEAR_VALID_BIT | XR_SPACE_VELOCITY_ANGULAR_VALID_BIT
};

/*!
 * @brief Flags class projection of XrSpaceVelocityFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceVelocityFlags>
 * @xrentity{XrSpaceVelocityFlagBits}
 * @see SpaceVelocityFlagBits, xr::Flags
 */
using SpaceVelocityFlags = Flags<SpaceVelocityFlagBits, XrSpaceVelocityFlags>;

/*!
 * @brief Bitwise OR operator between two SpaceVelocityFlagBits flag bits.
 * @see SpaceVelocityFlagBits, SpaceVelocityFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceVelocityFlags operator|(SpaceVelocityFlagBits bit0,
                                               SpaceVelocityFlagBits bit1) {
  return SpaceVelocityFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SpaceVelocityFlagBits flag bit.
 * @see SpaceVelocityFlagBits, SpaceVelocityFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceVelocityFlags operator~(SpaceVelocityFlagBits bits) {
  return ~(SpaceVelocityFlags(bits));
}

/*!
 * @brief Flag bits for XrSpaceLocationFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceLocationFlagBits>
 * @xrentity{XrSpaceLocationFlagBits}
 * @see SpaceLocationFlags
 */
enum class SpaceLocationFlagBits : XrFlags64 {
  None = 0,
  OrientationValid = XR_SPACE_LOCATION_ORIENTATION_VALID_BIT,
  PositionValid = XR_SPACE_LOCATION_POSITION_VALID_BIT,
  OrientationTracked = XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT,
  PositionTracked = XR_SPACE_LOCATION_POSITION_TRACKED_BIT,
  AllBits = XR_SPACE_LOCATION_ORIENTATION_VALID_BIT | XR_SPACE_LOCATION_POSITION_VALID_BIT |
            XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT | XR_SPACE_LOCATION_POSITION_TRACKED_BIT
};

/*!
 * @brief Flags class projection of XrSpaceLocationFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceLocationFlags>
 * @xrentity{XrSpaceLocationFlagBits}
 * @see SpaceLocationFlagBits, xr::Flags
 */
using SpaceLocationFlags = Flags<SpaceLocationFlagBits, XrSpaceLocationFlags>;

/*!
 * @brief Bitwise OR operator between two SpaceLocationFlagBits flag bits.
 * @see SpaceLocationFlagBits, SpaceLocationFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceLocationFlags operator|(SpaceLocationFlagBits bit0,
                                               SpaceLocationFlagBits bit1) {
  return SpaceLocationFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SpaceLocationFlagBits flag bit.
 * @see SpaceLocationFlagBits, SpaceLocationFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceLocationFlags operator~(SpaceLocationFlagBits bits) {
  return ~(SpaceLocationFlags(bits));
}

/*!
 * @brief Flag bits for XrSwapchainCreateFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFlagBits>
 * @xrentity{XrSwapchainCreateFlagBits}
 * @see SwapchainCreateFlags
 */
enum class SwapchainCreateFlagBits : XrFlags64 {
  None = 0,
  ProtectedContent = XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT,
  StaticImage = XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT,
  AllBits = XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT | XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT
};

/*!
 * @brief Flags class projection of XrSwapchainCreateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFlags>
 * @xrentity{XrSwapchainCreateFlagBits}
 * @see SwapchainCreateFlagBits, xr::Flags
 */
using SwapchainCreateFlags = Flags<SwapchainCreateFlagBits, XrSwapchainCreateFlags>;

/*!
 * @brief Bitwise OR operator between two SwapchainCreateFlagBits flag bits.
 * @see SwapchainCreateFlagBits, SwapchainCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFlags operator|(SwapchainCreateFlagBits bit0,
                                                 SwapchainCreateFlagBits bit1) {
  return SwapchainCreateFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainCreateFlagBits flag bit.
 * @see SwapchainCreateFlagBits, SwapchainCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFlags operator~(SwapchainCreateFlagBits bits) {
  return ~(SwapchainCreateFlags(bits));
}

/*!
 * @brief Flag bits for XrSwapchainUsageFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainUsageFlagBits>
 * @xrentity{XrSwapchainUsageFlagBits}
 * @see SwapchainUsageFlags
 */
enum class SwapchainUsageFlagBits : XrFlags64 {
  None = 0,
  ColorAttachment = XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT,
  DepthStencilAttachment = XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
  UnorderedAccess = XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT,
  TransferSrc = XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT,
  TransferDst = XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT,
  Sampled = XR_SWAPCHAIN_USAGE_SAMPLED_BIT,
  MutableFormat = XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT,
  InputAttachmentBitMND = XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND,
  AllBits = XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT |
            XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT |
            XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT | XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT |
            XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT | XR_SWAPCHAIN_USAGE_SAMPLED_BIT |
            XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT | XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND
};

/*!
 * @brief Flags class projection of XrSwapchainUsageFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainUsageFlags>
 * @xrentity{XrSwapchainUsageFlagBits}
 * @see SwapchainUsageFlagBits, xr::Flags
 */
using SwapchainUsageFlags = Flags<SwapchainUsageFlagBits, XrSwapchainUsageFlags>;

/*!
 * @brief Bitwise OR operator between two SwapchainUsageFlagBits flag bits.
 * @see SwapchainUsageFlagBits, SwapchainUsageFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainUsageFlags operator|(SwapchainUsageFlagBits bit0,
                                                SwapchainUsageFlagBits bit1) {
  return SwapchainUsageFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainUsageFlagBits flag bit.
 * @see SwapchainUsageFlagBits, SwapchainUsageFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainUsageFlags operator~(SwapchainUsageFlagBits bits) {
  return ~(SwapchainUsageFlags(bits));
}

/*!
 * @brief Flag bits for XrCompositionLayerFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerFlagBits>
 * @xrentity{XrCompositionLayerFlagBits}
 * @see CompositionLayerFlags
 */
enum class CompositionLayerFlagBits : XrFlags64 {
  None = 0,
  CorrectChromaticAberration = XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT,
  BlendTextureSourceAlpha = XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT,
  UnpremultipliedAlpha = XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT,
  AllBits = XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT |
            XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT |
            XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT
};

/*!
 * @brief Flags class projection of XrCompositionLayerFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerFlags>
 * @xrentity{XrCompositionLayerFlagBits}
 * @see CompositionLayerFlagBits, xr::Flags
 */
using CompositionLayerFlags = Flags<CompositionLayerFlagBits, XrCompositionLayerFlags>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerFlagBits flag bits.
 * @see CompositionLayerFlagBits, CompositionLayerFlags, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerFlags operator|(CompositionLayerFlagBits bit0,
                                                  CompositionLayerFlagBits bit1) {
  return CompositionLayerFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerFlagBits flag bit.
 * @see CompositionLayerFlagBits, CompositionLayerFlags, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerFlags operator~(CompositionLayerFlagBits bits) {
  return ~(CompositionLayerFlags(bits));
}

/*!
 * @brief Flag bits for XrViewStateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrViewStateFlagBits>
 * @xrentity{XrViewStateFlagBits}
 * @see ViewStateFlags
 */
enum class ViewStateFlagBits : XrFlags64 {
  None = 0,
  OrientationValid = XR_VIEW_STATE_ORIENTATION_VALID_BIT,
  PositionValid = XR_VIEW_STATE_POSITION_VALID_BIT,
  OrientationTracked = XR_VIEW_STATE_ORIENTATION_TRACKED_BIT,
  PositionTracked = XR_VIEW_STATE_POSITION_TRACKED_BIT,
  AllBits = XR_VIEW_STATE_ORIENTATION_VALID_BIT | XR_VIEW_STATE_POSITION_VALID_BIT |
            XR_VIEW_STATE_ORIENTATION_TRACKED_BIT | XR_VIEW_STATE_POSITION_TRACKED_BIT
};

/*!
 * @brief Flags class projection of XrViewStateFlags
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrViewStateFlags>
 * @xrentity{XrViewStateFlagBits}
 * @see ViewStateFlagBits, xr::Flags
 */
using ViewStateFlags = Flags<ViewStateFlagBits, XrViewStateFlags>;

/*!
 * @brief Bitwise OR operator between two ViewStateFlagBits flag bits.
 * @see ViewStateFlagBits, ViewStateFlags, xr::Flags
 */
OPENXR_HPP_INLINE ViewStateFlags operator|(ViewStateFlagBits bit0, ViewStateFlagBits bit1) {
  return ViewStateFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a ViewStateFlagBits flag bit.
 * @see ViewStateFlagBits, ViewStateFlags, xr::Flags
 */
OPENXR_HPP_INLINE ViewStateFlags operator~(ViewStateFlagBits bits) {
  return ~(ViewStateFlags(bits));
}

/*!
 * @brief Flag bits for XrInputSourceLocalizedNameFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInputSourceLocalizedNameFlagBits>
 * @xrentity{XrInputSourceLocalizedNameFlagBits}
 * @see InputSourceLocalizedNameFlags
 */
enum class InputSourceLocalizedNameFlagBits : XrFlags64 {
  None = 0,
  UserPath = XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT,
  InteractionProfile = XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT,
  Component = XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT,
  AllBits = XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT |
            XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT |
            XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT
};

/*!
 * @brief Flags class projection of XrInputSourceLocalizedNameFlags
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInputSourceLocalizedNameFlags>
 * @xrentity{XrInputSourceLocalizedNameFlagBits}
 * @see InputSourceLocalizedNameFlagBits, xr::Flags
 */
using InputSourceLocalizedNameFlags =
    Flags<InputSourceLocalizedNameFlagBits, XrInputSourceLocalizedNameFlags>;

/*!
 * @brief Bitwise OR operator between two InputSourceLocalizedNameFlagBits flag bits.
 * @see InputSourceLocalizedNameFlagBits, InputSourceLocalizedNameFlags, xr::Flags
 */
OPENXR_HPP_INLINE InputSourceLocalizedNameFlags operator|(InputSourceLocalizedNameFlagBits bit0,
                                                          InputSourceLocalizedNameFlagBits bit1) {
  return InputSourceLocalizedNameFlags(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a InputSourceLocalizedNameFlagBits flag bit.
 * @see InputSourceLocalizedNameFlagBits, InputSourceLocalizedNameFlags, xr::Flags
 */
OPENXR_HPP_INLINE InputSourceLocalizedNameFlags operator~(InputSourceLocalizedNameFlagBits bits) {
  return ~(InputSourceLocalizedNameFlags(bits));
}

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
/*!
 * @brief Flag bits for XrVulkanInstanceCreateFlagsKHR
 *
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanInstanceCreateFlagBitsKHR>
 * @xrentity{XrVulkanInstanceCreateFlagBitsKHR}
 * @see VulkanInstanceCreateFlagsKHR
 */
enum class VulkanInstanceCreateFlagBitsKHR : XrFlags64 { None = 0, AllBits = 0 };

/*!
 * @brief Flags class projection of XrVulkanInstanceCreateFlagsKHR
 *
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanInstanceCreateFlagsKHR>
 * @xrentity{XrVulkanInstanceCreateFlagBitsKHR}
 * @see VulkanInstanceCreateFlagBitsKHR, xr::Flags
 */
using VulkanInstanceCreateFlagsKHR =
    Flags<VulkanInstanceCreateFlagBitsKHR, XrVulkanInstanceCreateFlagsKHR>;

/*!
 * @brief Bitwise OR operator between two VulkanInstanceCreateFlagBitsKHR flag bits.
 * @see VulkanInstanceCreateFlagBitsKHR, VulkanInstanceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanInstanceCreateFlagsKHR operator|(VulkanInstanceCreateFlagBitsKHR bit0,
                                                         VulkanInstanceCreateFlagBitsKHR bit1) {
  return VulkanInstanceCreateFlagsKHR(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a VulkanInstanceCreateFlagBitsKHR flag bit.
 * @see VulkanInstanceCreateFlagBitsKHR, VulkanInstanceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanInstanceCreateFlagsKHR operator~(VulkanInstanceCreateFlagBitsKHR bits) {
  return ~(VulkanInstanceCreateFlagsKHR(bits));
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
/*!
 * @brief Flag bits for XrVulkanDeviceCreateFlagsKHR
 *
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanDeviceCreateFlagBitsKHR>
 * @xrentity{XrVulkanDeviceCreateFlagBitsKHR}
 * @see VulkanDeviceCreateFlagsKHR
 */
enum class VulkanDeviceCreateFlagBitsKHR : XrFlags64 { None = 0, AllBits = 0 };

/*!
 * @brief Flags class projection of XrVulkanDeviceCreateFlagsKHR
 *
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanDeviceCreateFlagsKHR>
 * @xrentity{XrVulkanDeviceCreateFlagBitsKHR}
 * @see VulkanDeviceCreateFlagBitsKHR, xr::Flags
 */
using VulkanDeviceCreateFlagsKHR =
    Flags<VulkanDeviceCreateFlagBitsKHR, XrVulkanDeviceCreateFlagsKHR>;

/*!
 * @brief Bitwise OR operator between two VulkanDeviceCreateFlagBitsKHR flag bits.
 * @see VulkanDeviceCreateFlagBitsKHR, VulkanDeviceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanDeviceCreateFlagsKHR operator|(VulkanDeviceCreateFlagBitsKHR bit0,
                                                       VulkanDeviceCreateFlagBitsKHR bit1) {
  return VulkanDeviceCreateFlagsKHR(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a VulkanDeviceCreateFlagBitsKHR flag bit.
 * @see VulkanDeviceCreateFlagBitsKHR, VulkanDeviceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanDeviceCreateFlagsKHR operator~(VulkanDeviceCreateFlagBitsKHR bits) {
  return ~(VulkanDeviceCreateFlagsKHR(bits));
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_EXT_debug_utils
/*!
 * @brief Flag bits for XrDebugUtilsMessageSeverityFlagsEXT
 *
 * Provided by the `XR_EXT_debug_utils` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageSeverityFlagBitsEXT>
 * @xrentity{XrDebugUtilsMessageSeverityFlagBitsEXT}
 * @see DebugUtilsMessageSeverityFlagsEXT
 */
enum class DebugUtilsMessageSeverityFlagBitsEXT : XrFlags64 {
  None = 0,
  Verbose = XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
  Info = XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
  Warning = XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
  Error = XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
  AllBits = XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT
};

/*!
 * @brief Flags class projection of XrDebugUtilsMessageSeverityFlagsEXT
 *
 * Provided by the `XR_EXT_debug_utils` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageSeverityFlagsEXT>
 * @xrentity{XrDebugUtilsMessageSeverityFlagBitsEXT}
 * @see DebugUtilsMessageSeverityFlagBitsEXT, xr::Flags
 */
using DebugUtilsMessageSeverityFlagsEXT =
    Flags<DebugUtilsMessageSeverityFlagBitsEXT, XrDebugUtilsMessageSeverityFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two DebugUtilsMessageSeverityFlagBitsEXT flag bits.
 * @see DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageSeverityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageSeverityFlagsEXT
operator|(DebugUtilsMessageSeverityFlagBitsEXT bit0, DebugUtilsMessageSeverityFlagBitsEXT bit1) {
  return DebugUtilsMessageSeverityFlagsEXT(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a DebugUtilsMessageSeverityFlagBitsEXT flag bit.
 * @see DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageSeverityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageSeverityFlagsEXT
operator~(DebugUtilsMessageSeverityFlagBitsEXT bits) {
  return ~(DebugUtilsMessageSeverityFlagsEXT(bits));
}

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
/*!
 * @brief Flag bits for XrDebugUtilsMessageTypeFlagsEXT
 *
 * Provided by the `XR_EXT_debug_utils` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageTypeFlagBitsEXT>
 * @xrentity{XrDebugUtilsMessageTypeFlagBitsEXT}
 * @see DebugUtilsMessageTypeFlagsEXT
 */
enum class DebugUtilsMessageTypeFlagBitsEXT : XrFlags64 {
  None = 0,
  General = XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
  Validation = XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
  Performance = XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
  Conformance = XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT,
  AllBits = XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT |
            XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT
};

/*!
 * @brief Flags class projection of XrDebugUtilsMessageTypeFlagsEXT
 *
 * Provided by the `XR_EXT_debug_utils` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageTypeFlagsEXT>
 * @xrentity{XrDebugUtilsMessageTypeFlagBitsEXT}
 * @see DebugUtilsMessageTypeFlagBitsEXT, xr::Flags
 */
using DebugUtilsMessageTypeFlagsEXT =
    Flags<DebugUtilsMessageTypeFlagBitsEXT, XrDebugUtilsMessageTypeFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two DebugUtilsMessageTypeFlagBitsEXT flag bits.
 * @see DebugUtilsMessageTypeFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageTypeFlagsEXT operator|(DebugUtilsMessageTypeFlagBitsEXT bit0,
                                                          DebugUtilsMessageTypeFlagBitsEXT bit1) {
  return DebugUtilsMessageTypeFlagsEXT(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a DebugUtilsMessageTypeFlagBitsEXT flag bit.
 * @see DebugUtilsMessageTypeFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageTypeFlagsEXT operator~(DebugUtilsMessageTypeFlagBitsEXT bits) {
  return ~(DebugUtilsMessageTypeFlagsEXT(bits));
}

#endif  // XR_EXT_debug_utils

#ifdef XR_EXTX_overlay
/*!
 * @brief Flag bits for XrOverlaySessionCreateFlagsEXTX
 *
 * Provided by the `XR_EXTX_overlay` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlaySessionCreateFlagBitsEXTX>
 * @xrentity{XrOverlaySessionCreateFlagBitsEXTX}
 * @see OverlaySessionCreateFlagsEXTX
 */
enum class OverlaySessionCreateFlagBitsEXTX : XrFlags64 {
  None = 0,
  RelaxedDisplayTime = XR_OVERLAY_SESSION_CREATE_RELAXED_DISPLAY_TIME_BIT_EXTX,
  AllBits = XR_OVERLAY_SESSION_CREATE_RELAXED_DISPLAY_TIME_BIT_EXTX
};

/*!
 * @brief Flags class projection of XrOverlaySessionCreateFlagsEXTX
 *
 * Provided by the `XR_EXTX_overlay` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlaySessionCreateFlagsEXTX>
 * @xrentity{XrOverlaySessionCreateFlagBitsEXTX}
 * @see OverlaySessionCreateFlagBitsEXTX, xr::Flags
 */
using OverlaySessionCreateFlagsEXTX =
    Flags<OverlaySessionCreateFlagBitsEXTX, XrOverlaySessionCreateFlagsEXTX>;

/*!
 * @brief Bitwise OR operator between two OverlaySessionCreateFlagBitsEXTX flag bits.
 * @see OverlaySessionCreateFlagBitsEXTX, OverlaySessionCreateFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlaySessionCreateFlagsEXTX operator|(OverlaySessionCreateFlagBitsEXTX bit0,
                                                          OverlaySessionCreateFlagBitsEXTX bit1) {
  return OverlaySessionCreateFlagsEXTX(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a OverlaySessionCreateFlagBitsEXTX flag bit.
 * @see OverlaySessionCreateFlagBitsEXTX, OverlaySessionCreateFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlaySessionCreateFlagsEXTX operator~(OverlaySessionCreateFlagBitsEXTX bits) {
  return ~(OverlaySessionCreateFlagsEXTX(bits));
}

#endif  // XR_EXTX_overlay

#ifdef XR_EXTX_overlay
/*!
 * @brief Flag bits for XrOverlayMainSessionFlagsEXTX
 *
 * Provided by the `XR_EXTX_overlay` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlayMainSessionFlagBitsEXTX>
 * @xrentity{XrOverlayMainSessionFlagBitsEXTX}
 * @see OverlayMainSessionFlagsEXTX
 */
enum class OverlayMainSessionFlagBitsEXTX : XrFlags64 {
  None = 0,
  EnabledCompositionLayerInfoDepth =
      XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX,
  AllBits = XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX
};

/*!
 * @brief Flags class projection of XrOverlayMainSessionFlagsEXTX
 *
 * Provided by the `XR_EXTX_overlay` extension.
 *
 * @see
 * <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlayMainSessionFlagsEXTX>
 * @xrentity{XrOverlayMainSessionFlagBitsEXTX}
 * @see OverlayMainSessionFlagBitsEXTX, xr::Flags
 */
using OverlayMainSessionFlagsEXTX =
    Flags<OverlayMainSessionFlagBitsEXTX, XrOverlayMainSessionFlagsEXTX>;

/*!
 * @brief Bitwise OR operator between two OverlayMainSessionFlagBitsEXTX flag bits.
 * @see OverlayMainSessionFlagBitsEXTX, OverlayMainSessionFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlayMainSessionFlagsEXTX operator|(OverlayMainSessionFlagBitsEXTX bit0,
                                                        OverlayMainSessionFlagBitsEXTX bit1) {
  return OverlayMainSessionFlagsEXTX(bit0) | bit1;
}

/*!
 * @brief Bitwise negation operator of a OverlayMainSessionFlagBitsEXTX flag bit.
 * @see OverlayMainSessionFlagBitsEXTX, OverlayMainSessionFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlayMainSessionFlagsEXTX operator~(OverlayMainSessionFlagBitsEXTX bits) {
  return ~(OverlayMainSessionFlagsEXTX(bits));
}

#endif  // XR_EXTX_overlay
//! @}

}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_FLAGS_HPP_
