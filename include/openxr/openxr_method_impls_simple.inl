// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_METHOD_IMPLS_SIMPLE_INL_
#define OPENXR_METHOD_IMPLS_SIMPLE_INL_
/*!
 * @file
 * @brief Inline implementations - include @ref openxr_method_impls.hpp instead!
 *
 * Contains inline implementations of simple method wrappers.
 */

#ifdef OPENXR_HPP_DOXYGEN

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE
#include "openxr_handles.hpp"
#endif

#ifndef OPENXR_HANDLES_HPP_
#error "This is not meant to be included on its own."
#endif

namespace OPENXR_HPP_NAMESPACE {

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getInstanceProcAddr(const char* name,
                                                       PFN_xrVoidFunction* function,
                                                       Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetInstanceProcAddr(this->get(), name, function));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result enumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                     uint32_t* propertyCountOutput,
                                                     XrApiLayerProperties* properties,
                                                     Dispatch&& d) {
  Result result = static_cast<Result>(
      d.xrEnumerateApiLayerProperties(propertyCapacityInput, propertyCountOutput, properties));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result enumerateInstanceExtensionProperties(const char* layerName,
                                                              uint32_t propertyCapacityInput,
                                                              uint32_t* propertyCountOutput,
                                                              XrExtensionProperties* properties,
                                                              Dispatch&& d) {
  Result result = static_cast<Result>(d.xrEnumerateInstanceExtensionProperties(
      layerName, propertyCapacityInput, propertyCountOutput, properties));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result createInstance(const InstanceCreateInfo& createInfo, Instance& instance,
                                        Dispatch&& d) {
  Result result = static_cast<Result>(d.xrCreateInstance(createInfo.get(), instance.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroyInstance(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getInstanceProperties(InstanceProperties& instanceProperties,
                                                         Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetInstanceProperties(this->get(), instanceProperties.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::pollEvent(EventDataBuffer& eventData, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrPollEvent(this->get(), eventData.put()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_PROVIDE_DISCOURAGED_FUNCTIONS

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::resultToString(Result value,
                                                  char buffer[XR_MAX_RESULT_STRING_SIZE],
                                                  Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrResultToString(this->get(), OPENXR_HPP_NAMESPACE::get(value), buffer));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  //  OPENXR_HPP_PROVIDE_DISCOURAGED_FUNCTIONS

#ifdef OPENXR_HPP_PROVIDE_DISCOURAGED_FUNCTIONS

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::structureTypeToString(StructureType value,
                                                         char buffer[XR_MAX_STRUCTURE_NAME_SIZE],
                                                         Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrStructureTypeToString(this->get(), OPENXR_HPP_NAMESPACE::get(value), buffer));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  //  OPENXR_HPP_PROVIDE_DISCOURAGED_FUNCTIONS

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getSystem(const SystemGetInfo& getInfo, SystemId systemId,
                                             Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetSystem(this->get(), getInfo.get(), systemId.get()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getSystemProperties(SystemId systemId,
                                                       SystemProperties& properties,
                                                       Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetSystemProperties(this->get(), systemId.get(), properties.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::enumerateEnvironmentBlendModes(
    SystemId systemId, ViewConfigurationType viewConfigurationType,
    uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
    XrEnvironmentBlendMode* environmentBlendModes, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEnumerateEnvironmentBlendModes(
      this->get(), systemId.get(), OPENXR_HPP_NAMESPACE::get(viewConfigurationType),
      environmentBlendModeCapacityInput, environmentBlendModeCountOutput, environmentBlendModes));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::createSession(const SessionCreateInfo& createInfo,
                                                 Session& session, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateSession(this->get(), createInfo.get(), session.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroySession(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::enumerateReferenceSpaces(uint32_t spaceCapacityInput,
                                                           uint32_t* spaceCountOutput,
                                                           XrReferenceSpaceType* spaces,
                                                           Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrEnumerateReferenceSpaces(this->get(), spaceCapacityInput, spaceCountOutput, spaces));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createReferenceSpace(const ReferenceSpaceCreateInfo& createInfo,
                                                       Space& space, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateReferenceSpace(this->get(), createInfo.get(), space.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getReferenceSpaceBoundsRect(ReferenceSpaceType referenceSpaceType,
                                                              Extent2Df& bounds,
                                                              Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetReferenceSpaceBoundsRect(
      this->get(), OPENXR_HPP_NAMESPACE::get(referenceSpaceType), bounds.put()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createActionSpace(const ActionSpaceCreateInfo& createInfo,
                                                    Space& space, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateActionSpace(this->get(), createInfo.get(), space.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Space::locateSpace(Space baseSpace, Time time, SpaceLocation& location,
                                            Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrLocateSpace(this->get(), baseSpace.get(), time.get(), location.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Space::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroySpace(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::enumerateViewConfigurations(
    SystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
    uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes,
    Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEnumerateViewConfigurations(
      this->get(), systemId.get(), viewConfigurationTypeCapacityInput,
      viewConfigurationTypeCountOutput, viewConfigurationTypes));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getViewConfigurationProperties(
    SystemId systemId, ViewConfigurationType viewConfigurationType,
    ViewConfigurationProperties& configurationProperties, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetViewConfigurationProperties(
      this->get(), systemId.get(), OPENXR_HPP_NAMESPACE::get(viewConfigurationType),
      configurationProperties.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::enumerateViewConfigurationViews(
    SystemId systemId, ViewConfigurationType viewConfigurationType, uint32_t viewCapacityInput,
    uint32_t* viewCountOutput, XrViewConfigurationView* views, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEnumerateViewConfigurationViews(
      this->get(), systemId.get(), OPENXR_HPP_NAMESPACE::get(viewConfigurationType),
      viewCapacityInput, viewCountOutput, views));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::enumerateSwapchainFormats(uint32_t formatCapacityInput,
                                                            uint32_t* formatCountOutput,
                                                            int64_t* formats, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrEnumerateSwapchainFormats(this->get(), formatCapacityInput, formatCountOutput, formats));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createSwapchain(const SwapchainCreateInfo& createInfo,
                                                  Swapchain& swapchain, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateSwapchain(this->get(), createInfo.get(), swapchain.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Swapchain::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroySwapchain(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Swapchain::enumerateSwapchainImages(uint32_t imageCapacityInput,
                                                             uint32_t* imageCountOutput,
                                                             XrSwapchainImageBaseHeader* images,
                                                             Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrEnumerateSwapchainImages(this->get(), imageCapacityInput, imageCountOutput, images));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Swapchain::acquireSwapchainImage(
    const SwapchainImageAcquireInfo& acquireInfo, uint32_t* index, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrAcquireSwapchainImage(this->get(), acquireInfo.get(), index));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Swapchain::waitSwapchainImage(const SwapchainImageWaitInfo& waitInfo,
                                                       Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrWaitSwapchainImage(this->get(), waitInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
Swapchain::releaseSwapchainImage(const SwapchainImageReleaseInfo& releaseInfo, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrReleaseSwapchainImage(this->get(), releaseInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::beginSession(const SessionBeginInfo& beginInfo,
                                               Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrBeginSession(this->get(), beginInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::endSession(Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEndSession(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::requestExitSession(Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrRequestExitSession(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::waitFrame(const FrameWaitInfo& frameWaitInfo,
                                            FrameState& frameState, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrWaitFrame(this->get(), frameWaitInfo.get(), frameState.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::beginFrame(const FrameBeginInfo& frameBeginInfo,
                                             Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrBeginFrame(this->get(), frameBeginInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::endFrame(const FrameEndInfo& frameEndInfo, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEndFrame(this->get(), frameEndInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::locateViews(const ViewLocateInfo& viewLocateInfo,
                                              XrViewState* viewState, uint32_t viewCapacityInput,
                                              uint32_t* viewCountOutput, XrView* views,
                                              Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrLocateViews(this->get(), viewLocateInfo.get(), viewState,
                                                      viewCapacityInput, viewCountOutput, views));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::stringToPath(const char* pathString, Path path,
                                                Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrStringToPath(this->get(), pathString, path.get()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::pathToString(Path path, uint32_t bufferCapacityInput,
                                                uint32_t* bufferCountOutput, char* buffer,
                                                Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrPathToString(this->get(), path.get(), bufferCapacityInput, bufferCountOutput, buffer));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::createActionSet(const ActionSetCreateInfo& createInfo,
                                                   ActionSet& actionSet, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateActionSet(this->get(), createInfo.get(), actionSet.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result ActionSet::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroyActionSet(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result ActionSet::createAction(const ActionCreateInfo& createInfo, Action& action,
                                                 Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateAction(this->get(), createInfo.get(), action.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Action::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroyAction(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::suggestInteractionProfileBindings(
    const InteractionProfileSuggestedBinding& suggestedBindings, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrSuggestInteractionProfileBindings(this->get(), suggestedBindings.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::attachSessionActionSets(
    const SessionActionSetsAttachInfo& attachInfo, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrAttachSessionActionSets(this->get(), attachInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getCurrentInteractionProfile(
    Path topLevelUserPath, InteractionProfileState& interactionProfile, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetCurrentInteractionProfile(
      this->get(), topLevelUserPath.get(), interactionProfile.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getActionStateBoolean(const ActionStateGetInfo& getInfo,
                                                        ActionStateBoolean& state,
                                                        Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetActionStateBoolean(this->get(), getInfo.get(), state.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getActionStateFloat(const ActionStateGetInfo& getInfo,
                                                      ActionStateFloat& state, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetActionStateFloat(this->get(), getInfo.get(), state.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getActionStateVector2f(const ActionStateGetInfo& getInfo,
                                                         ActionStateVector2f& state,
                                                         Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetActionStateVector2f(this->get(), getInfo.get(), state.put()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getActionStatePose(const ActionStateGetInfo& getInfo,
                                                     ActionStatePose& state, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrGetActionStatePose(this->get(), getInfo.get(), state.put()));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::syncActions(const ActionsSyncInfo& syncInfo, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSyncActions(this->get(), syncInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::enumerateBoundSourcesForAction(
    const BoundSourcesForActionEnumerateInfo& enumerateInfo, uint32_t sourceCapacityInput,
    uint32_t* sourceCountOutput, Path sources, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEnumerateBoundSourcesForAction(
      this->get(), enumerateInfo.get(), sourceCapacityInput, sourceCountOutput, sources.get()));

  return result;
}

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getInputSourceLocalizedName(
    const InputSourceLocalizedNameGetInfo& getInfo, uint32_t bufferCapacityInput,
    uint32_t* bufferCountOutput, char* buffer, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetInputSourceLocalizedName(
      this->get(), getInfo.get(), bufferCapacityInput, bufferCountOutput, buffer));

  return result;
}

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::applyHapticFeedback(const HapticActionInfo& hapticActionInfo,
                                                      const XrHapticBaseHeader* hapticFeedback,
                                                      Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrApplyHapticFeedback(this->get(), hapticActionInfo.get(), hapticFeedback));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::stopHapticFeedback(const HapticActionInfo& hapticActionInfo,
                                                     Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrStopHapticFeedback(this->get(), hapticActionInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#ifdef XR_KHR_android_thread_settings
#if defined(XR_USE_PLATFORM_ANDROID)

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setAndroidApplicationThreadKHR(AndroidThreadTypeKHR threadType,
                                                                 uint32_t threadId,
                                                                 Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetAndroidApplicationThreadKHR(
      this->get(), OPENXR_HPP_NAMESPACE::get(threadType), threadId));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_thread_settings

#ifdef XR_KHR_android_surface_swapchain
#if defined(XR_USE_PLATFORM_ANDROID)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createSwapchainAndroidSurfaceKHR(const SwapchainCreateInfo& info,
                                                                   Swapchain& swapchain,
                                                                   jobject* surface,
                                                                   Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateSwapchainAndroidSurfaceKHR(this->get(), info.get(), swapchain.put(), surface));

  return result;
}

#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_surface_swapchain

#ifdef XR_KHR_opengl_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getOpenGLGraphicsRequirementsKHR(
    SystemId systemId, GraphicsRequirementsOpenGLKHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetOpenGLGraphicsRequirementsKHR(
      this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_OPENGL)
#endif  // XR_KHR_opengl_enable

#ifdef XR_KHR_opengl_es_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL_ES)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getOpenGLESGraphicsRequirementsKHR(
    SystemId systemId, GraphicsRequirementsOpenGLESKHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetOpenGLESGraphicsRequirementsKHR(
      this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_OPENGL_ES)
#endif  // XR_KHR_opengl_es_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getVulkanInstanceExtensionsKHR(SystemId systemId,
                                                                  uint32_t bufferCapacityInput,
                                                                  uint32_t* bufferCountOutput,
                                                                  char* buffer,
                                                                  Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetVulkanInstanceExtensionsKHR(
      this->get(), systemId.get(), bufferCapacityInput, bufferCountOutput, buffer));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getVulkanDeviceExtensionsKHR(SystemId systemId,
                                                                uint32_t bufferCapacityInput,
                                                                uint32_t* bufferCountOutput,
                                                                char* buffer, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetVulkanDeviceExtensionsKHR(
      this->get(), systemId.get(), bufferCapacityInput, bufferCountOutput, buffer));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getVulkanGraphicsDeviceKHR(SystemId systemId,
                                                              VkInstance vkInstance,
                                                              VkPhysicalDevice* vkPhysicalDevice,
                                                              Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrGetVulkanGraphicsDeviceKHR(this->get(), systemId.get(), vkInstance, vkPhysicalDevice));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getVulkanGraphicsRequirementsKHR(
    SystemId systemId, GraphicsRequirementsVulkanKHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetVulkanGraphicsRequirementsKHR(
      this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_D3D11_enable
#if defined(XR_USE_GRAPHICS_API_D3D11)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getD3D11GraphicsRequirementsKHR(
    SystemId systemId, GraphicsRequirementsD3D11KHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrGetD3D11GraphicsRequirementsKHR(this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_D3D11)
#endif  // XR_KHR_D3D11_enable

#ifdef XR_KHR_D3D12_enable
#if defined(XR_USE_GRAPHICS_API_D3D12)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getD3D12GraphicsRequirementsKHR(
    SystemId systemId, GraphicsRequirementsD3D12KHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrGetD3D12GraphicsRequirementsKHR(this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_D3D12)
#endif  // XR_KHR_D3D12_enable

#ifdef XR_KHR_visibility_mask

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getVisibilityMaskKHR(ViewConfigurationType viewConfigurationType,
                                                       uint32_t viewIndex,
                                                       VisibilityMaskTypeKHR visibilityMaskType,
                                                       VisibilityMaskKHR& visibilityMask,
                                                       Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetVisibilityMaskKHR(
      this->get(), OPENXR_HPP_NAMESPACE::get(viewConfigurationType), viewIndex,
      OPENXR_HPP_NAMESPACE::get(visibilityMaskType), visibilityMask.put()));

  return result;
}

#endif  // XR_KHR_visibility_mask

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::convertWin32PerformanceCounterToTimeKHR(
    const LARGE_INTEGER* performanceCounter, Time time, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrConvertWin32PerformanceCounterToTimeKHR(this->get(), performanceCounter, time.get()));

  return result;
}

#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::convertTimeToWin32PerformanceCounterKHR(
    Time time, LARGE_INTEGER* performanceCounter, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrConvertTimeToWin32PerformanceCounterKHR(this->get(), time.get(), performanceCounter));

  return result;
}

#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::convertTimespecTimeToTimeKHR(const struct timespec* timespecTime,
                                                                Time time, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrConvertTimespecTimeToTimeKHR(this->get(), timespecTime, time.get()));

  return result;
}

#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::convertTimeToTimespecTimeKHR(Time time,
                                                                struct timespec* timespecTime,
                                                                Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrConvertTimeToTimespecTimeKHR(this->get(), time.get(), timespecTime));

  return result;
}

#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_loader_init

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result initializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo,
                                             Dispatch&& d) {
  Result result = static_cast<Result>(d.xrInitializeLoaderKHR(loaderInitInfo));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_KHR_loader_init

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::createVulkanInstanceKHR(
    const VulkanInstanceCreateInfoKHR& createInfo, VkInstance* vulkanInstance,
    VkResult* vulkanResult, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateVulkanInstanceKHR(this->get(), createInfo.get(), vulkanInstance, vulkanResult));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
Instance::createVulkanDeviceKHR(const VulkanDeviceCreateInfoKHR& createInfo, VkDevice* vulkanDevice,
                                VkResult* vulkanResult, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateVulkanDeviceKHR(this->get(), createInfo.get(), vulkanDevice, vulkanResult));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
Instance::getVulkanGraphicsDevice2KHR(const VulkanGraphicsDeviceGetInfoKHR& getInfo,
                                      VkPhysicalDevice* vulkanPhysicalDevice, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrGetVulkanGraphicsDevice2KHR(this->get(), getInfo.get(), vulkanPhysicalDevice));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::getVulkanGraphicsRequirements2KHR(
    SystemId systemId, GraphicsRequirementsVulkanKHR& graphicsRequirements, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetVulkanGraphicsRequirements2KHR(
      this->get(), systemId.get(), graphicsRequirements.put()));

  return result;
}

#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_EXT_performance_settings

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::perfSettingsSetPerformanceLevelEXT(PerfSettingsDomainEXT domain,
                                                                     PerfSettingsLevelEXT level,
                                                                     Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrPerfSettingsSetPerformanceLevelEXT(
      this->get(), OPENXR_HPP_NAMESPACE::get(domain), OPENXR_HPP_NAMESPACE::get(level)));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_performance_settings

#ifdef XR_EXT_thermal_query

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::thermalGetTemperatureTrendEXT(
    PerfSettingsDomainEXT domain, PerfSettingsNotificationLevelEXT& notificationLevel,
    float* tempHeadroom, float* tempSlope, Dispatch&& d) const {
  XrPerfSettingsNotificationLevelEXT notificationLevel_tmp;
  Result result = static_cast<Result>(
      d.xrThermalGetTemperatureTrendEXT(this->get(), OPENXR_HPP_NAMESPACE::get(domain),
                                        notificationLevel_tmp, tempHeadroom, tempSlope));
  notificationLevel = static_cast<PerfSettingsNotificationLevelEXT>(notificationLevel_tmp);
  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_thermal_query

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::setDebugUtilsObjectNameEXT(
    const DebugUtilsObjectNameInfoEXT& nameInfo, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetDebugUtilsObjectNameEXT(this->get(), nameInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
Instance::createDebugUtilsMessengerEXT(const DebugUtilsMessengerCreateInfoEXT& createInfo,
                                       DebugUtilsMessengerEXT& messenger, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateDebugUtilsMessengerEXT(this->get(), createInfo.get(), messenger.put()));

  return result;
}

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result DebugUtilsMessengerEXT::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroyDebugUtilsMessengerEXT(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Instance::submitDebugUtilsMessageEXT(
    XrDebugUtilsMessageSeverityFlagsEXT messageSeverity,
    XrDebugUtilsMessageTypeFlagsEXT messageTypes,
    const DebugUtilsMessengerCallbackDataEXT& callbackData, Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSubmitDebugUtilsMessageEXT(
      this->get(), messageSeverity, messageTypes, callbackData.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::sessionBeginDebugUtilsLabelRegionEXT(
    const DebugUtilsLabelEXT& labelInfo, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrSessionBeginDebugUtilsLabelRegionEXT(this->get(), labelInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::sessionEndDebugUtilsLabelRegionEXT(Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSessionEndDebugUtilsLabelRegionEXT(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
Session::sessionInsertDebugUtilsLabelEXT(const DebugUtilsLabelEXT& labelInfo, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrSessionInsertDebugUtilsLabelEXT(this->get(), labelInfo.get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_debug_utils

#ifdef XR_MSFT_spatial_anchor

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createSpatialAnchorMSFT(
    const SpatialAnchorCreateInfoMSFT& createInfo, SpatialAnchorMSFT& anchor, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateSpatialAnchorMSFT(this->get(), createInfo.get(), anchor.put()));

  return result;
}

#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createSpatialAnchorSpaceMSFT(
    const SpatialAnchorSpaceCreateInfoMSFT& createInfo, Space& space, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateSpatialAnchorSpaceMSFT(this->get(), createInfo.get(), space.put()));

  return result;
}

#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result SpatialAnchorMSFT::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroySpatialAnchorMSFT(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_MSFT_spatial_anchor

#ifdef XR_EXT_conformance_automation

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setInputDeviceActiveEXT(Path interactionProfile,
                                                          Path topLevelPath, XrBool32 isActive,
                                                          Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetInputDeviceActiveEXT(
      this->get(), interactionProfile.get(), topLevelPath.get(), isActive));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setInputDeviceStateBoolEXT(Path topLevelPath,
                                                             Path inputSourcePath, XrBool32 state,
                                                             Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetInputDeviceStateBoolEXT(
      this->get(), topLevelPath.get(), inputSourcePath.get(), state));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setInputDeviceStateFloatEXT(Path topLevelPath,
                                                              Path inputSourcePath, float state,
                                                              Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetInputDeviceStateFloatEXT(
      this->get(), topLevelPath.get(), inputSourcePath.get(), state));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setInputDeviceStateVector2fEXT(Path topLevelPath,
                                                                 Path inputSourcePath,
                                                                 XrVector2f state,
                                                                 Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetInputDeviceStateVector2fEXT(
      this->get(), topLevelPath.get(), inputSourcePath.get(), state));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setInputDeviceLocationEXT(Path topLevelPath, Path inputSourcePath,
                                                            Space space, XrPosef pose,
                                                            Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrSetInputDeviceLocationEXT(
      this->get(), topLevelPath.get(), inputSourcePath.get(), space.get(), pose));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_hand_tracking

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createHandTrackerEXT(const HandTrackerCreateInfoEXT& createInfo,
                                                       HandTrackerEXT& handTracker,
                                                       Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateHandTrackerEXT(this->get(), createInfo.get(), handTracker.put()));

  return result;
}

#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result HandTrackerEXT::destroy(Dispatch&& d) {
  Result result = static_cast<Result>(d.xrDestroyHandTrackerEXT(this->get()));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result
HandTrackerEXT::locateHandJointsEXT(const HandJointsLocateInfoEXT& locateInfo,
                                    HandJointLocationsEXT& locations, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrLocateHandJointsEXT(this->get(), locateInfo.get(), locations.put()));

  return result;
}

#endif  // XR_EXT_hand_tracking

#ifdef XR_MSFT_hand_tracking_mesh

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result HandTrackerEXT::createHandMeshSpaceMSFT(
    const HandMeshSpaceCreateInfoMSFT& createInfo, Space& space, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrCreateHandMeshSpaceMSFT(this->get(), createInfo.get(), space.put()));

  return result;
}

#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_hand_tracking_mesh

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result HandTrackerEXT::updateHandMeshMSFT(
    const HandMeshUpdateInfoMSFT& updateInfo, HandMeshMSFT& handMesh, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrUpdateHandMeshMSFT(this->get(), updateInfo.get(), handMesh.put()));

  return result;
}

#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::createSpatialAnchorFromPerceptionAnchorMSFT(
    IUnknown* perceptionAnchor, SpatialAnchorMSFT& anchor, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrCreateSpatialAnchorFromPerceptionAnchorMSFT(this->get(), perceptionAnchor, anchor.put()));

  return result;
}

#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::tryGetPerceptionAnchorFromSpatialAnchorMSFT(
    SpatialAnchorMSFT anchor, IUnknown** perceptionAnchor, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(this->get(), anchor.get(), perceptionAnchor));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_FB_display_refresh_rate

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::enumerateDisplayRefreshRatesFB(
    uint32_t displayRefreshRateCapacityInput, uint32_t* displayRefreshRateCountOutput,
    float* displayRefreshRates, Dispatch&& d) const {
  Result result = static_cast<Result>(
      d.xrEnumerateDisplayRefreshRatesFB(this->get(), displayRefreshRateCapacityInput,
                                         displayRefreshRateCountOutput, displayRefreshRates));

  return result;
}

#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::getDisplayRefreshRateFB(float* displayRefreshRate,
                                                          Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrGetDisplayRefreshRateFB(this->get(), displayRefreshRate));

  return result;
}

#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::requestDisplayRefreshRateFB(float displayRefreshRate,
                                                              Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrRequestDisplayRefreshRateFB(this->get(), displayRefreshRate));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_color_space

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::enumerateColorSpacesFB(uint32_t colorSpaceCapacityInput,
                                                         uint32_t* colorSpaceCountOutput,
                                                         XrColorSpaceFB* colorSpaces,
                                                         Dispatch&& d) const {
  Result result = static_cast<Result>(d.xrEnumerateColorSpacesFB(
      this->get(), colorSpaceCapacityInput, colorSpaceCountOutput, colorSpaces));

  return result;
}

#endif  // XR_FB_color_space

#ifdef XR_FB_color_space

#ifdef OPENXR_HPP_DISABLE_ENHANCED_MODE

template <typename Dispatch, OPENXR_HPP_REQUIRE_DISPATCH(Dispatch)>
OPENXR_HPP_INLINE Result Session::setColorSpaceFB(ColorSpaceFB colorspace, Dispatch&& d) const {
  Result result =
      static_cast<Result>(d.xrSetColorSpaceFB(this->get(), OPENXR_HPP_NAMESPACE::get(colorspace)));

  return result;
}
#endif  // OPENXR_HPP_DISABLE_ENHANCED_MODE

#endif  // XR_FB_color_space
}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_METHOD_IMPLS_SIMPLE_INL_
